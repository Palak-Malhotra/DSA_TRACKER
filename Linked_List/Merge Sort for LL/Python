def find_mid(head):
    slow, fast = head, head.next
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
    return slow
def merge(left, right):
    if left is None:
        return right
    if right is None:
        return left
    result = Node(-1)
    temp = result
    while left and right:
        if left.data < right.data:
            temp.next = left
            temp = left
            left = left.next
        else:
            temp.next = right
            temp = right
            right = right.next
    while left:
        temp.next = left
        temp = left
        left = left.next
    while right:
        temp.next = right
        temp = right
        right = right.next
    return result.next
            
class Solution:
    #Function to sort the given linked list using Merge Sort.
    def mergeSort(self, head):
        if head is None or head.next is None:
            return head
        mid = find_mid(head)
        left = head
        right = mid.next
        mid.next = None
        left = self.mergeSort(left)
        right = self.mergeSort(right)
        result = merge(left, right)
        return result
